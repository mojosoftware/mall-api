version: "3.8"

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: mall_mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: Mq123
      MYSQL_DATABASE: mall_db
      MYSQL_USER: mall_user
      MYSQL_PASSWORD: mall123
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pMq123"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s
    networks:
      - mall_network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: mall_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 5s
      start_period: 10s
    networks:
      - mall_network

  # 商城API服务
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: mall_api
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=Mq123
      - DB_NAME=mall_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key
      - SITE_NAME=商城系统
      - SITE_URL=http://localhost
      - EMAIL_HOST=smtp.example.com
      - EMAIL_PORT=465
      - EMAIL_SECURE=true
      - EMAIL_USER=
      - EMAIL_PASS=
      - EMAIL_FROM=noreply@example.com
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./public:/app/public
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 60s
    networks:
      - mall_network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: mall_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./public:/var/www/html
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      timeout: 5s
      retries: 3
      interval: 30s
    networks:
      - mall_network

  # 数据库管理工具 (可选)
  adminer:
    image: adminer:latest
    container_name: mall_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - mall_network
    profiles:
      - tools

  # Redis管理工具 (可选)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mall_redis_commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mall_network
    profiles:
      - tools

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  mall_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
