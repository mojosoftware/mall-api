name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  tag:
    - 'v*'

env:
  NODE_VERSION: '18'
  REGISTRY: registry.cn-hangzhou.aliyuncs.com
  IMAGE_NAME: mall-api

jobs:
  # 代码质量检查
  lint:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js环境
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 代码规范检查
        run: npm run lint

      - name: 代码格式检查
        run: npm run format:check

  # 单元测试
  test:
    name: 单元测试
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test123
          MYSQL_DATABASE: mall_test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js环境
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 等待服务启动
        run: |
          sleep 10
          npm run test:wait-services

      - name: 运行测试
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USERNAME: root
          DB_PASSWORD: test123
          DB_NAME: mall_test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret

      - name: 上传测试覆盖率
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js环境
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 安全审计
        run: npm audit --audit-level=high

  # Docker镜像构建
  build:
    name: 构建Docker镜像
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.event_name == 'push' || github.event_name == 'tag'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 登录阿里云容器镜像服务
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: 构建并推送Docker镜像
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.mall-api.com
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 部署到测试环境
        run: |
          echo "部署到测试环境"
          # 这里可以添加具体的部署脚本
          ./scripts/deploy-gitee.sh staging ${{ needs.build.outputs.image-tag }}

      - name: 冒烟测试
        run: |
          sleep 30
          curl -f https://staging.mall-api.com/health || exit 1

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://api.mall.com
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 部署到生产环境
        run: |
          echo "部署到生产环境"
          ./scripts/deploy-gitee.sh production ${{ needs.build.outputs.image-tag }}

      - name: 健康检查
        run: |
          sleep 30
          curl -f https://api.mall.com/health || exit 1

      - name: 钉钉通知
        uses: zcong1993/actions-ding@master
        with:
          dingToken: ${{ secrets.DING_TOKEN }}
          body: |
            {
              "msgtype": "markdown",
              "markdown": {
                "title": "部署通知",
                "text": "## 🚀 生产环境部署成功\n\n- **项目**: 商城API\n- **版本**: ${{ github.ref_name }}\n- **环境**: 生产环境\n- **状态**: ✅ 成功\n- **访问地址**: https://api.mall.com"
              }
            }